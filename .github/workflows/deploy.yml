name: Deploy to Production

on:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Build frontend assets
        run: npm run build

      - name: Setup SSH
        run: |
          # Debug: Check if secrets are available
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå SSH_PRIVATE_KEY secret is empty!"
            exit 1
          fi

          if [ -z "${{ secrets.HOST }}" ]; then
            echo "‚ùå HOST secret is empty!"
            exit 1
          fi

          echo "‚úÖ Secrets are available"

          # Create SSH directory
          mkdir -p ~/.ssh

          # Write SSH private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Verify the key was written correctly
          if [ ! -s ~/.ssh/id_rsa ]; then
            echo "‚ùå SSH private key file is empty!"
            exit 1
          fi

          echo "‚úÖ SSH private key written successfully"

          # Add host to known_hosts
          echo "üîç Adding ${{ secrets.HOST }} to known_hosts..."

          # Use custom port if specified, otherwise default to 22
          SSH_PORT="${{ secrets.PORT }}"
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT=22
          fi

          echo "üîç Using port: $SSH_PORT"

          # Try ssh-keyscan with the specified port
          ssh-keyscan -p $SSH_PORT -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts 2>&1 || {
            echo "‚ùå ssh-keyscan failed. Trying alternative method..."

            # Alternative: Add host without verification (less secure but works)
            echo "Host ${{ secrets.HOST }}" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
            echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config
            echo "  Port $SSH_PORT" >> ~/.ssh/config

            echo "‚ö†Ô∏è  Added host with StrictHostKeyChecking disabled"
          }

          echo "‚úÖ SSH setup completed successfully"

      - name: Deploy to server via rsync
        run: |
          # Deploy files using rsync
          rsync -avz --delete \
            --exclude-from='.deployignore' \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='node_modules/' \
            --exclude='.env*' \
            --exclude='tests/' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/data/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='storage/app/public/*' \
            --exclude='storage/app/private/*' \
            --exclude='bootstrap/cache/*' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PORT }}" \
            ./ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:${{ secrets.DEPLOY_PATH }}/

          echo "üöÄ Files synced successfully!"

      - name: Reinstall composer dependencies
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            composer install --no-dev --optimize-autoloader
            echo "‚úÖ Composer dependencies reinstalled!"
          EOF

      - name: Clear Laravel optimized caches
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            php artisan optimize:clear
            echo "‚úÖ Laravel caches cleared!"
          EOF

      - name: Copy frontend build to public directory
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            cp -r public/build/* ../public_html/build/
            cp -r public/images/* ../public_html/images/
            echo "‚úÖ Frontend build copied to public directory!"
          EOF

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üöÄ Frontend built and files synced to production successfully!"
          else
            echo "‚ùå Deployment to production failed!"
          fi
